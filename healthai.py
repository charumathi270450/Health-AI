# -*- coding: utf-8 -*-
"""HealthAI.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-Q1X3Zu9O62Fga9zYVfrY4JYPxvaxAA6
"""

!pip install transformers torch gradio -q

import gradio as gr
import torch
from transformers import AutoTokenizer, AutoModelForCausalLM

# You can change this if granite is too heavy
# model_name = "ibm-granite/granite-3.2-2b-instruct"
model_name = "microsoft/phi-2"

tokenizer = AutoTokenizer.from_pretrained(model_name)

model = AutoModelForCausalLM.from_pretrained(
    model_name,
    torch_dtype=torch.float16 if torch.cuda.is_available() else torch.float32,
    device_map="auto" if torch.cuda.is_available() else {"": "cpu"}
)

if tokenizer.pad_token is None:
    tokenizer.pad_token = tokenizer.eos_token

# ---------------------------
# Helper: Generate Response
# ---------------------------
def generate_response(prompt, max_length=1024):
    inputs = tokenizer(prompt, return_tensors="pt", truncation=True, max_length=512)
    if torch.cuda.is_available():
        inputs = {k: v.to(model.device) for k, v in inputs.items()}

    with torch.no_grad():
        outputs = model.generate(
            **inputs,
            max_length=max_length,
            temperature=0.7,
            do_sample=True,
            pad_token_id=tokenizer.eos_token_id
        )

    response = tokenizer.decode(
        outputs[0][inputs["input_ids"].shape[-1]:],
        skip_special_tokens=True
    )
    return response.strip()

# ---------------------------
# Disease Prediction
# ---------------------------
def disease_prediction(symptoms):
    prompt = (
        f"Based on the following symptoms: {symptoms}, "
        "provide possible medical conditions and general medication suggestions. "
        "Always emphasize the importance of consulting a healthcare professional."
    )
    return generate_response(prompt, max_length=1200)

# ---------------------------
# Treatment Plan
# ---------------------------
def treatment_plan(condition, age, gender, medical_history):
    prompt = (
        f"Patient Information:\n"
        f"- Condition: {condition}\n"
        f"- Age: {age}\n"
        f"- Gender: {gender}\n"
        f"- Medical History: {medical_history}\n\n"
        "Generate personalized treatment suggestions. "
        "Include home remedies, lifestyle changes, and general medication guidelines "
        "(without prescribing exact drugs). "
        "Always emphasize the importance of consulting a healthcare professional."
    )
    return generate_response(prompt, max_length=1200)

# ---------------------------
# Chat Assistant
# ---------------------------
def chat_response(message, history):
    history_text = "\n".join([f"User: {u}\nAI: {a}" for u, a in history])
    prompt = (
        f"You are a helpful medical information assistant. "
        f"Always remind users to consult healthcare professionals for medical advice.\n\n"
        f"{history_text}\nUser: {message}\nAI:"
    )
    reply = generate_response(prompt, max_length=800)
    history.append((message, reply))
    return history, history

# ---------------------------
# Save Chat History
# ---------------------------
def save_history(history):
    if not history:
        return None
    text = "\n\n".join([f"User: {u}\nAI: {a}" for u, a in history])
    filepath = "chat_history.txt"
    with open(filepath, "w", encoding="utf-8") as f:
        f.write(text)
    return filepath  # must return a filepath since gr.File uses type="filepath"

# ---------------------------
# Gradio App
# ---------------------------
with gr.Blocks() as app:
    gr.Markdown("# üè• Medical AI Assistant")
    gr.Markdown(
        "**Disclaimer:** This is for **informational purposes only**. "
        "Always consult healthcare professionals for medical advice."
    )

    with gr.Tabs():
        # Disease Prediction Tab
        with gr.TabItem("Disease Prediction"):
            with gr.Row():
                with gr.Column():
                    symptoms_input = gr.Textbox(
                        label="Enter Symptoms",
                        placeholder="e.g., fever, headache, cough, fatigue...",
                        lines=4
                    )
                    predict_btn = gr.Button("Analyze Symptoms")
                with gr.Column():
                    prediction_output = gr.Textbox(
                        label="Possible Conditions & Recommendations",
                        lines=20
                    )
            predict_btn.click(
                disease_prediction,
                inputs=symptoms_input,
                outputs=prediction_output
            )

        # Treatment Plan Tab
        with gr.TabItem("Treatment Plans"):
            with gr.Row():
                with gr.Column():
                    condition_input = gr.Textbox(
                        label="Medical Condition",
                        placeholder="e.g., diabetes, hypertension, migraine...",
                        lines=2
                    )
                    age_input = gr.Number(label="Age", value=30)
                    gender_input = gr.Dropdown(
                        choices=["Male", "Female", "Other"],
                        label="Gender",
                        value="Male"
                    )
                    history_input = gr.Textbox(
                        label="Medical History",
                        placeholder="Previous conditions, allergies, medications or None",
                        lines=3
                    )
                    plan_btn = gr.Button("Generate Treatment Plan")
                with gr.Column():
                    plan_output = gr.Textbox(
                        label="Personalized Treatment Plan",
                        lines=20
                    )
            plan_btn.click(
                treatment_plan,
                inputs=[condition_input, age_input, gender_input, history_input],
                outputs=plan_output
            )

        # Chat Assistant Tab
        with gr.TabItem("Chat Assistant"):
            chatbot = gr.Chatbot(label="Chat with Medical AI")
            msg = gr.Textbox(
                label="Your Message",
                placeholder="Ask any health-related question..."
            )
            with gr.Row():
                clear = gr.Button("Clear Chat")
                save_btn = gr.Button("Save Chat History")
                download_file = gr.File(label="Download Chat", type="filepath")  # ‚úÖ fixed

            msg.submit(chat_response, [msg, chatbot], [chatbot, chatbot])
            clear.click(lambda: None, None, chatbot, queue=False)
            save_btn.click(save_history, chatbot, download_file)

# Launch App
app.launch(share=True, inline=False)